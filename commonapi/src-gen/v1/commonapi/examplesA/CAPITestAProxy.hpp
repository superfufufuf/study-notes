/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.0.v202012010850.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COMMONAPI_EXAMPLESA_CAPI_Test_A_PROXY_HPP_
#define V1_COMMONAPI_EXAMPLESA_CAPI_Test_A_PROXY_HPP_

#include <v1/commonapi/examplesA/CAPITestAProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace commonapi {
namespace examplesA {

template <typename ... _AttributeExtensions>
class CAPITestAProxy
    : virtual public CAPITestA,
      virtual public CAPITestAProxyBase,
      virtual public _AttributeExtensions... {
public:
    CAPITestAProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~CAPITestAProxy();

    typedef CAPITestA InterfaceType;


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

    virtual std::future<void> getCompletionFuture();

    /**
     * Calls foo with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void foo(int32_t _x1, std::string _x2, CommonAPI::CallStatus &_internalCallStatus, CAPITestA::stdErrorTypeEnum &_error, int32_t &_y1, std::string &_y2, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls foo with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> fooAsync(const int32_t &_x1, const std::string &_x2, FooAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Returns the wrapper class that provides access to the broadcast myStatus.
     */
    virtual MyStatusEvent& getMyStatusEvent() {
        return delegate_->getMyStatusEvent();
    }
    /**
     * Returns the wrapper class that provides access to the attribute x.
     */
    virtual XAttribute& getXAttribute() {
        return delegate_->getXAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute a1.
     */
    virtual A1Attribute& getA1Attribute() {
        return delegate_->getA1Attribute();
    }



 private:
    std::shared_ptr< CAPITestAProxyBase> delegate_;
};

typedef CAPITestAProxy<> CAPITestAProxyDefault;

namespace CAPITestAExtensions {
    template <template <typename > class _ExtensionType>
    class XAttributeExtension {
     public:
        typedef _ExtensionType< CAPITestAProxyBase::XAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< CAPITestAProxyBase::XAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        XAttributeExtension(CAPITestAProxyBase& proxy): attributeExtension_(proxy.getXAttribute()) {
        }
    
        inline extension_type& getXAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class A1AttributeExtension {
     public:
        typedef _ExtensionType< CAPITestAProxyBase::A1Attribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< CAPITestAProxyBase::A1Attribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        A1AttributeExtension(CAPITestAProxyBase& proxy): attributeExtension_(proxy.getA1Attribute()) {
        }
    
        inline extension_type& getA1AttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace CAPITestAExtensions

//
// CAPITestAProxy Implementation
//
template <typename ... _AttributeExtensions>
CAPITestAProxy<_AttributeExtensions...>::CAPITestAProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast< CAPITestAProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast< CAPITestAProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
CAPITestAProxy<_AttributeExtensions...>::~CAPITestAProxy() {
}

template <typename ... _AttributeExtensions>
void CAPITestAProxy<_AttributeExtensions...>::foo(int32_t _x1, std::string _x2, CommonAPI::CallStatus &_internalCallStatus, CAPITestA::stdErrorTypeEnum &_error, int32_t &_y1, std::string &_y2, const CommonAPI::CallInfo *_info) {
    delegate_->foo(_x1, _x2, _internalCallStatus, _error, _y1, _y2, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CAPITestAProxy<_AttributeExtensions...>::fooAsync(const int32_t &_x1, const std::string &_x2, FooAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->fooAsync(_x1, _x2, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &CAPITestAProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool CAPITestAProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool CAPITestAProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& CAPITestAProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& CAPITestAProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


template <typename ... _AttributeExtensions>
std::future<void> CAPITestAProxy<_AttributeExtensions...>::getCompletionFuture() {
    return delegate_->getCompletionFuture();
}

} // namespace examplesA
} // namespace commonapi
} // namespace v1

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper< ::v1::commonapi::examplesA::CAPITestAProxy,
    _AttributeExtension> {
    typedef typename ::v1::commonapi::examplesA::CAPITestAProxy<
            ::v1::commonapi::examplesA::CAPITestAExtensions::XAttributeExtension<_AttributeExtension>, 
            ::v1::commonapi::examplesA::CAPITestAExtensions::A1AttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v1_2 = v1;

#endif // V1_COMMONAPI_EXAMPLESA_CAPI_Test_A_PROXY_HPP_
