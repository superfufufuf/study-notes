/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.0.v202012010944.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#include <v1/commonapi/examplesB/CAPITestBSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace commonapi {
namespace examplesB {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createCAPITestBSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< CAPITestBSomeIPProxy>(_address, _connection);
}

void initializeCAPITestBSomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:commonapi.examplesB.CAPITestB:v1_2:commonapi.examplesB.Methods",
        0x1235, 0x5679, 1, 2);
    CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
        "commonapi.examplesB.CAPITestB:v1_2",
        &createCAPITestBSomeIPProxy);
}

INITIALIZER(registerCAPITestBSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeCAPITestBSomeIPProxy);
}

CAPITestBSomeIPProxy::CAPITestBSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection)
{
}

CAPITestBSomeIPProxy::~CAPITestBSomeIPProxy() {
    completed_.set_value();
}



void CAPITestBSomeIPProxy::foo(int32_t _x1, CommonAPI::CallStatus &_internalCallStatus, CAPITestB::stdErrorTypeEnum &_error, int32_t &_y1, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< CAPITestB::stdErrorTypeEnum, ::v1::commonapi::examplesB::CAPITestB_::stdErrorTypeEnumDeployment_t> deploy_error(static_cast< ::v1::commonapi::examplesB::CAPITestB_::stdErrorTypeEnumDeployment_t * >(nullptr));
    CommonAPI::Deployable< int32_t, CommonAPI::SomeIP::IntegerDeployment<int32_t>> deploy_x1(_x1, static_cast< CommonAPI::SomeIP::IntegerDeployment<int32_t>* >(nullptr));
    CommonAPI::Deployable< int32_t, CommonAPI::SomeIP::IntegerDeployment<int32_t>> deploy_y1(static_cast< CommonAPI::SomeIP::IntegerDeployment<int32_t>* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                int32_t,
                CommonAPI::SomeIP::IntegerDeployment<int32_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                CAPITestB::stdErrorTypeEnum,
                ::v1::commonapi::examplesB::CAPITestB_::stdErrorTypeEnumDeployment_t
            >,
            CommonAPI::Deployable<
                int32_t,
                CommonAPI::SomeIP::IntegerDeployment<int32_t>
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7530),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_x1,
        _internalCallStatus,
        deploy_error,
        deploy_y1);
    _error = deploy_error.getValue();
    _y1 = deploy_y1.getValue();
}

std::future<CommonAPI::CallStatus> CAPITestBSomeIPProxy::fooAsync(const int32_t &_x1, FooAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< CAPITestB::stdErrorTypeEnum, ::v1::commonapi::examplesB::CAPITestB_::stdErrorTypeEnumDeployment_t> deploy_error(static_cast< ::v1::commonapi::examplesB::CAPITestB_::stdErrorTypeEnumDeployment_t * >(nullptr));
    CommonAPI::Deployable< int32_t, CommonAPI::SomeIP::IntegerDeployment<int32_t>> deploy_x1(_x1, static_cast< CommonAPI::SomeIP::IntegerDeployment<int32_t>* >(nullptr));
    CommonAPI::Deployable< int32_t, CommonAPI::SomeIP::IntegerDeployment<int32_t>> deploy_y1(static_cast< CommonAPI::SomeIP::IntegerDeployment<int32_t>* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                int32_t,
                CommonAPI::SomeIP::IntegerDeployment<int32_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                CAPITestB::stdErrorTypeEnum,
                ::v1::commonapi::examplesB::CAPITestB_::stdErrorTypeEnumDeployment_t
            >,
            CommonAPI::Deployable<
                int32_t,
                CommonAPI::SomeIP::IntegerDeployment<int32_t>
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7530),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_x1,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< CAPITestB::stdErrorTypeEnum, ::v1::commonapi::examplesB::CAPITestB_::stdErrorTypeEnumDeployment_t > _deploy_error, CommonAPI::Deployable< int32_t, CommonAPI::SomeIP::IntegerDeployment<int32_t> > _y1) {
            if (_callback)
                _callback(_internalCallStatus, _deploy_error.getValue(), _y1.getValue());
        },
        std::make_tuple(deploy_error, deploy_y1));
}

void CAPITestBSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 2;
}

std::future<void> CAPITestBSomeIPProxy::getCompletionFuture() {
    return completed_.get_future();
}

} // namespace examplesB
} // namespace commonapi
} // namespace v1
