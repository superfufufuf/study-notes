// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file UsrData.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "UsrData.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define UsrData_max_cdr_typesize 520ULL;
#define UsrData_max_key_cdr_typesize 0ULL;

UsrData::UsrData()
{
    // string m_key
    m_key ="";
    // string m_value
    m_value ="";

}

UsrData::~UsrData()
{


}

UsrData::UsrData(
        const UsrData& x)
{
    m_key = x.m_key;
    m_value = x.m_value;
}

UsrData::UsrData(
        UsrData&& x) noexcept 
{
    m_key = std::move(x.m_key);
    m_value = std::move(x.m_value);
}

UsrData& UsrData::operator =(
        const UsrData& x)
{

    m_key = x.m_key;
    m_value = x.m_value;

    return *this;
}

UsrData& UsrData::operator =(
        UsrData&& x) noexcept
{

    m_key = std::move(x.m_key);
    m_value = std::move(x.m_value);

    return *this;
}

bool UsrData::operator ==(
        const UsrData& x) const
{

    return (m_key == x.m_key && m_value == x.m_value);
}

bool UsrData::operator !=(
        const UsrData& x) const
{
    return !(*this == x);
}

size_t UsrData::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return UsrData_max_cdr_typesize;
}

size_t UsrData::getCdrSerializedSize(
        const UsrData& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.key().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.value().size() + 1;


    return current_alignment - initial_alignment;
}

void UsrData::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_key.c_str();
    scdr << m_value.c_str();

}

void UsrData::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_key;
    dcdr >> m_value;
}

/*!
 * @brief This function copies the value in member key
 * @param _key New value to be copied in member key
 */
void UsrData::key(
        const std::string& _key)
{
    m_key = _key;
}

/*!
 * @brief This function moves the value in member key
 * @param _key New value to be moved in member key
 */
void UsrData::key(
        std::string&& _key)
{
    m_key = std::move(_key);
}

/*!
 * @brief This function returns a constant reference to member key
 * @return Constant reference to member key
 */
const std::string& UsrData::key() const
{
    return m_key;
}

/*!
 * @brief This function returns a reference to member key
 * @return Reference to member key
 */
std::string& UsrData::key()
{
    return m_key;
}
/*!
 * @brief This function copies the value in member value
 * @param _value New value to be copied in member value
 */
void UsrData::value(
        const std::string& _value)
{
    m_value = _value;
}

/*!
 * @brief This function moves the value in member value
 * @param _value New value to be moved in member value
 */
void UsrData::value(
        std::string&& _value)
{
    m_value = std::move(_value);
}

/*!
 * @brief This function returns a constant reference to member value
 * @return Constant reference to member value
 */
const std::string& UsrData::value() const
{
    return m_value;
}

/*!
 * @brief This function returns a reference to member value
 * @return Reference to member value
 */
std::string& UsrData::value()
{
    return m_value;
}


size_t UsrData::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return UsrData_max_key_cdr_typesize;
}

bool UsrData::isKeyDefined()
{
    return false;
}

void UsrData::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

